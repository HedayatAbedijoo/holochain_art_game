{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2","program":"/home/hedayat/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","regex","/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=663c29c0c31e45c2","-C","extra-filename=-663c29c0c31e45c2","--out-dir","/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps","-L","dependency=/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps","--extern","aho_corasick=/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps/libaho_corasick-ae77a023c8f65fb9.rmeta","--extern","memchr=/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps/libmemchr-f523d6ecddf18599.rmeta","--extern","regex_syntax=/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps/libregex_syntax-bef1674f6aa9242e.rmeta","--extern","thread_local=/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps/libthread_local-ee7b8d4ae35f1a8c.rmeta","--extern","utf8_ranges=/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps/libutf8_ranges-4b10d9d7295974a0.rmeta","--cap-lints","allow","--cfg","regex_runtime_teddy_ssse3","--cfg","regex_runtime_teddy_avx2","--error-format=json","--sysroot","/home/hedayat/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/hedayat/holo/tutorial/art_game/zomes/game/code/target/rls/debug/deps/libregex-663c29c0c31e45c2.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[16485457120596408220,18213763144212411166]},"crate_root":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src","external_crates":[{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[209835277530881657,15808503733927382107]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16029480004387217627,6286701584104388484]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11090620017897417446,12697652474452346877]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10266695456344252550,6880608577203890473]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[891772713935988946,4065685175361189969]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8746283424692937858,2818242532065180231]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4536512594218270843,7173380446293199441]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15719965530685779716,707774774224757388]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1848642013280761028,5321209516682386969]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[15341350632097049551,10795069077588447444]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[6131951739161126534,12836766564382686052]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4055154462036822968,992105156702146647]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4418916403738006939,11520932697003723527]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[18166257815422958374,1563515351942068747]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":15,"id":{"name":"aho_corasick","disambiguator":[3695607336573134010,10610217648827118754]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15894174206674155412,11375203830522452170]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":17,"id":{"name":"thread_local","disambiguator":[10769368449000426357,4376974893984111515]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[18230275146478832047,693505733744788843]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":19,"id":{"name":"regex_syntax","disambiguator":[16973436810143103933,15529867795296860642]}},{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","num":20,"id":{"name":"utf8_ranges","disambiguator":[12251927366948534249,9245856013687128825]}}],"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1725},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18630,"byte_end":18635,"line_start":537,"line_end":537,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2533},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18899,"byte_end":18904,"line_start":547,"line_end":547,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2509},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18906,"byte_end":18911,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1283},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18913,"byte_end":18921,"line_start":547,"line_end":547,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1247},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18927,"byte_end":18939,"line_start":548,"line_end":548,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1349},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18941,"byte_end":18948,"line_start":548,"line_end":548,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18950,"byte_end":18964,"line_start":548,"line_end":548,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18966,"byte_end":18983,"line_start":548,"line_end":548,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2538},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18989,"byte_end":19005,"line_start":549,"line_end":549,"column_start":5,"column_end":21},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1278},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19007,"byte_end":19016,"line_start":549,"line_end":549,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1360},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19022,"byte_end":19030,"line_start":550,"line_end":550,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2545},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19032,"byte_end":19043,"line_start":550,"line_end":550,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1379},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1258},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19055,"byte_end":19060,"line_start":550,"line_end":550,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1268},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19062,"byte_end":19068,"line_start":550,"line_end":550,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1179},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":19074,"byte_end":19080,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23230,"byte_end":23238,"line_start":678,"line_end":678,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23259,"byte_end":23263,"line_start":679,"line_end":679,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23265,"byte_end":23276,"line_start":679,"line_end":679,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":1893},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23299,"byte_end":23303,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":525},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23305,"byte_end":23310,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":1869},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23312,"byte_end":23321,"line_start":680,"line_end":680,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":1859},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23323,"byte_end":23330,"line_start":680,"line_end":680,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":1987},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23354,"byte_end":23369,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":2088},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23390,"byte_end":23397,"line_start":682,"line_end":682,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":2106},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23399,"byte_end":23403,"line_start":682,"line_end":682,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":2153},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23405,"byte_end":23414,"line_start":682,"line_end":682,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1461}},{"kind":"Use","ref_id":{"krate":0,"index":2188},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23416,"byte_end":23426,"line_start":682,"line_end":682,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1461}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":62},{"krate":0,"index":75},{"krate":0,"index":195},{"krate":0,"index":328},{"krate":0,"index":338},{"krate":0,"index":479},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":605},{"krate":0,"index":797},{"krate":0,"index":825},{"krate":0,"index":869},{"krate":0,"index":874},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1160},{"krate":0,"index":1387},{"krate":0,"index":1406},{"krate":0,"index":1461}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":18173,"byte_end":18195,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":22507,"byte_end":22512,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":22471,"byte_end":22498,"line_start":641,"line_end":641,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":44268,"byte_end":44276,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":44687,"byte_end":44690,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":45285,"byte_end":45295,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":46040,"byte_end":46045,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":46328,"byte_end":46337,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":46820,"byte_end":46823,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":47058,"byte_end":47065,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":47419,"byte_end":47426,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":159440,"byte_end":159446,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1729},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":159566,"byte_end":159580,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":159867,"byte_end":159882,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1725},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":159404,"byte_end":159409,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1732}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":366},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":162889,"byte_end":162893,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1740},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":163264,"byte_end":163274,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":163513,"byte_end":163526,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":165234,"byte_end":165245,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":165846,"byte_end":165849,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":166175,"byte_end":166183,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":166483,"byte_end":166494,"line_start":136,"line_end":136,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":166992,"byte_end":167001,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":167316,"byte_end":167319,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":167810,"byte_end":167830,"line_start":175,"line_end":175,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":168398,"byte_end":168403,"line_start":189,"line_end":189,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":168674,"byte_end":168683,"line_start":198,"line_end":198,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":168806,"byte_end":168813,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":171922,"byte_end":171927,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":197498,"byte_end":197513,"line_start":1015,"line_end":1015,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199258,"byte_end":199274,"line_start":1069,"line_end":1069,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199403,"byte_end":199419,"line_start":1075,"line_end":1075,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199618,"byte_end":199626,"line_start":1083,"line_end":1083,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199560,"byte_end":199577,"line_start":1082,"line_end":1082,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":200017,"byte_end":200029,"line_start":1093,"line_end":1093,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199959,"byte_end":199976,"line_start":1092,"line_end":1092,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":200155,"byte_end":200165,"line_start":1098,"line_end":1098,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":200296,"byte_end":200310,"line_start":1103,"line_end":1103,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":200485,"byte_end":200500,"line_start":1108,"line_end":1108,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":200658,"byte_end":200677,"line_start":1113,"line_end":1113,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":200864,"byte_end":200877,"line_start":1119,"line_end":1119,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":201034,"byte_end":201047,"line_start":1126,"line_end":1126,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":201222,"byte_end":201238,"line_start":1132,"line_end":1132,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1859},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":220647,"byte_end":220654,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":220826,"byte_end":220834,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":220961,"byte_end":220967,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221213,"byte_end":221217,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221311,"byte_end":221315,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221442,"byte_end":221445,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221590,"byte_end":221598,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221706,"byte_end":221709,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221830,"byte_end":221838,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":525},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":221964,"byte_end":221969,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222042,"byte_end":222044,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222221,"byte_end":222230,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222411,"byte_end":222424,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222564,"byte_end":222578,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222685,"byte_end":222694,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222844,"byte_end":222847,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":222909,"byte_end":222917,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223016,"byte_end":223024,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":525},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1869},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223768,"byte_end":223777,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223896,"byte_end":223899,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1893},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":229841,"byte_end":229845,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230169,"byte_end":230176,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230148,"byte_end":230157,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230368,"byte_end":230376,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230347,"byte_end":230356,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230599,"byte_end":230611,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230831,"byte_end":230843,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1987},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":232870,"byte_end":232885,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":233826,"byte_end":233831,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":233982,"byte_end":233990,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":234183,"byte_end":234191,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":235052,"byte_end":235060,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":235256,"byte_end":235260,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":235198,"byte_end":235215,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":235954,"byte_end":235964,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":236352,"byte_end":236360,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":236785,"byte_end":236789,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":237511,"byte_end":237514,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":237649,"byte_end":237652,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":237761,"byte_end":237769,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":237885,"byte_end":237888,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":238325,"byte_end":238341,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":738},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241613,"byte_end":241618,"line_start":266,"line_end":266,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":740},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241624,"byte_end":241629,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241645,"byte_end":241651,"line_start":268,"line_end":268,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":746},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241667,"byte_end":241669,"line_start":269,"line_end":269,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241690,"byte_end":241700,"line_start":270,"line_end":270,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":752},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241721,"byte_end":241730,"line_start":271,"line_end":271,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":736},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241591,"byte_end":241602,"line_start":265,"line_end":265,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, TeddySSSE3, TeddyAVX2}","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":752}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2030},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":246330,"byte_end":246341,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":248784,"byte_end":248788,"line_start":496,"line_end":496,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":248726,"byte_end":248743,"line_start":495,"line_end":495,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":249616,"byte_end":249625,"line_start":522,"line_end":522,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":249558,"byte_end":249575,"line_start":521,"line_end":521,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":249800,"byte_end":249803,"line_start":529,"line_end":529,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":249863,"byte_end":249871,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2088},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":334207,"byte_end":334214,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2089},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":334284,"byte_end":334289,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2090},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":334454,"byte_end":334461,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2091},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":334595,"byte_end":334603,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2092},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":334696,"byte_end":334712,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2093},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335069,"byte_end":335074,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2094},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335188,"byte_end":335200,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2095},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335279,"byte_end":335288,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2096},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335412,"byte_end":335420,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2097},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335609,"byte_end":335615,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2098},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335721,"byte_end":335731,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2099},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335813,"byte_end":335830,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2100},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":335908,"byte_end":335923,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2101},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":336014,"byte_end":336039,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2102},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":336131,"byte_end":336139,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2103},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":336966,"byte_end":336980,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":337106,"byte_end":337109,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":337824,"byte_end":337828,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":338142,"byte_end":338156,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":338682,"byte_end":338695,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":338902,"byte_end":338912,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":339147,"byte_end":339156,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":339304,"byte_end":339320,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2107},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344022,"byte_end":344027,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2110},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344157,"byte_end":344161,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2113},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344296,"byte_end":344301,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2116},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344461,"byte_end":344470,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2119},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344612,"byte_end":344616,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2122},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344790,"byte_end":344796,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2125},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":344994,"byte_end":344999,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2106},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":343593,"byte_end":343597,"line_start":259,"line_end":259,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2125}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345103,"byte_end":345111,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2132},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345309,"byte_end":345317,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":2133},{"krate":0,"index":2134}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2133},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345381,"byte_end":345385,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2132},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2134},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345540,"byte_end":345544,"line_start":306,"line_end":306,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2132},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2139},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345636,"byte_end":345645,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2141}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2140},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345801,"byte_end":345806,"line_start":314,"line_end":314,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2141},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345971,"byte_end":345976,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2146},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346076,"byte_end":346089,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346190,"byte_end":346194,"line_start":325,"line_end":325,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2148},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346264,"byte_end":346268,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2154},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346432,"byte_end":346441,"line_start":334,"line_end":334,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2156},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346477,"byte_end":346484,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2158},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346514,"byte_end":346523,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346551,"byte_end":346558,"line_start":340,"line_end":340,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346632,"byte_end":346644,"line_start":342,"line_end":342,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2164},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346724,"byte_end":346739,"line_start":344,"line_end":344,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2166},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346774,"byte_end":346791,"line_start":346,"line_end":346,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346830,"byte_end":346850,"line_start":348,"line_end":348,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2153},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2153},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346384,"byte_end":346393,"line_start":332,"line_end":332,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2181},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":346934,"byte_end":346942,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2182},{"krate":0,"index":2183}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2182},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347043,"byte_end":347047,"line_start":356,"line_end":356,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2181},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2183},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347097,"byte_end":347098,"line_start":358,"line_end":358,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2181},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2188},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347190,"byte_end":347200,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2189},{"krate":0,"index":2190}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2189},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347301,"byte_end":347305,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2190},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347380,"byte_end":347386,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347513,"byte_end":347520,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348306,"byte_end":348315,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2195},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348570,"byte_end":348579,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2196},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348680,"byte_end":348684,"line_start":411,"line_end":411,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2197},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348753,"byte_end":348758,"line_start":413,"line_end":413,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348820,"byte_end":348823,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348929,"byte_end":348936,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2203},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349627,"byte_end":349639,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349593,"byte_end":349615,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2204},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349650,"byte_end":349654,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2205},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349677,"byte_end":349687,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2206},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349704,"byte_end":349718,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2207},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349735,"byte_end":349745,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2208},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349760,"byte_end":349776,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2209},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349792,"byte_end":349802,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2210},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349818,"byte_end":349838,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2211},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349854,"byte_end":349864,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2212},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349880,"byte_end":349897,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2213},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349913,"byte_end":349920,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2214},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349936,"byte_end":349941,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2307},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365066,"byte_end":365071,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365252,"byte_end":365257,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365231,"byte_end":365240,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365396,"byte_end":365399,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365375,"byte_end":365384,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365501,"byte_end":365509,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365480,"byte_end":365489,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2331},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":366523,"byte_end":366528,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367587,"byte_end":367590,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":368321,"byte_end":368329,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":369191,"byte_end":369195,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":369911,"byte_end":369920,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":373057,"byte_end":373065,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":374510,"byte_end":374523,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":375441,"byte_end":375446,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":376462,"byte_end":376468,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":381251,"byte_end":381258,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":381715,"byte_end":381726,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":382195,"byte_end":382203,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":384678,"byte_end":384692,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":385080,"byte_end":385097,"line_start":571,"line_end":571,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":385541,"byte_end":385552,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":385949,"byte_end":385956,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":386604,"byte_end":386617,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":387124,"byte_end":387140,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":387685,"byte_end":387701,"line_start":646,"line_end":646,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":387990,"byte_end":387996,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":388119,"byte_end":388132,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":388268,"byte_end":388280,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":388491,"byte_end":388508,"line_start":675,"line_end":675,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":388855,"byte_end":388864,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":956},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":389354,"byte_end":389361,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":967},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":389934,"byte_end":389948,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":978},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":390529,"byte_end":390534,"line_start":733,"line_end":733,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":988},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":391517,"byte_end":391523,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":998},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":392218,"byte_end":392230,"line_start":796,"line_end":796,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2336},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":393365,"byte_end":393381,"line_start":827,"line_end":827,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1009},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":393703,"byte_end":393712,"line_start":835,"line_end":835,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":394070,"byte_end":394073,"line_start":843,"line_end":843,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":394049,"byte_end":394058,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":394368,"byte_end":394371,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":394347,"byte_end":394356,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":394731,"byte_end":394734,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":394710,"byte_end":394719,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":395368,"byte_end":395376,"line_start":879,"line_end":879,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":396311,"byte_end":396314,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":396599,"byte_end":396603,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":397035,"byte_end":397039,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398083,"byte_end":398089,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398400,"byte_end":398403,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398379,"byte_end":398388,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":401533,"byte_end":401550,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1063},{"krate":0,"index":1064}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1072},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":402243,"byte_end":402251,"line_start":1070,"line_end":1070,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1076}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":402537,"byte_end":402551,"line_start":1078,"line_end":1078,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1072},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":402962,"byte_end":402974,"line_start":1087,"line_end":1087,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1072},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":403705,"byte_end":403711,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1072},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2343},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":403939,"byte_end":403950,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1092},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":405235,"byte_end":405243,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2502},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":422041,"byte_end":422050,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":422379,"byte_end":422382,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":422826,"byte_end":422830,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":423125,"byte_end":423128,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":423541,"byte_end":423559,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1117},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":424762,"byte_end":424779,"line_start":99,"line_end":99,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1118},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":424832,"byte_end":424836,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":425011,"byte_end":425020,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":425116,"byte_end":425125,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":425471,"byte_end":425487,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":425594,"byte_end":425611,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":425767,"byte_end":425778,"line_start":127,"line_end":127,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":425932,"byte_end":425939,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":426174,"byte_end":426190,"line_start":142,"line_end":142,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":426423,"byte_end":426432,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":426754,"byte_end":426767,"line_start":165,"line_end":165,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1128},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":426983,"byte_end":426990,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":427249,"byte_end":427253,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":427351,"byte_end":427356,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428556,"byte_end":428570,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428767,"byte_end":428771,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428873,"byte_end":428878,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1179},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":430759,"byte_end":430765,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2509},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431016,"byte_end":431021,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431201,"byte_end":431206,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431180,"byte_end":431189,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431345,"byte_end":431348,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431324,"byte_end":431333,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431450,"byte_end":431456,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431429,"byte_end":431438,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2533},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434161,"byte_end":434166,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":435108,"byte_end":435111,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":435841,"byte_end":435849,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":436725,"byte_end":436729,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":437443,"byte_end":437452,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":440532,"byte_end":440540,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":441873,"byte_end":441886,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":442745,"byte_end":442750,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":443738,"byte_end":443744,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":448281,"byte_end":448288,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":448745,"byte_end":448756,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":449225,"byte_end":449233,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":452189,"byte_end":452203,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":452590,"byte_end":452607,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":453054,"byte_end":453065,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":453461,"byte_end":453468,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":454130,"byte_end":454143,"line_start":671,"line_end":671,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":454642,"byte_end":454658,"line_start":685,"line_end":685,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":455206,"byte_end":455222,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":455510,"byte_end":455516,"line_start":716,"line_end":716,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":455639,"byte_end":455652,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":455788,"byte_end":455800,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":456011,"byte_end":456028,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":456379,"byte_end":456388,"line_start":741,"line_end":741,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1247},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":456744,"byte_end":456756,"line_start":752,"line_end":752,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1258},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":457345,"byte_end":457350,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1268},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":458326,"byte_end":458332,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2538},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":459538,"byte_end":459554,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1278},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":459876,"byte_end":459885,"line_start":854,"line_end":854,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":460243,"byte_end":460246,"line_start":862,"line_end":862,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":460222,"byte_end":460231,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":460541,"byte_end":460544,"line_start":871,"line_end":871,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":460520,"byte_end":460529,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":460904,"byte_end":460907,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":460883,"byte_end":460892,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1283},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":461531,"byte_end":461539,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":462437,"byte_end":462440,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":462725,"byte_end":462729,"line_start":930,"line_end":930,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":463161,"byte_end":463165,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464209,"byte_end":464215,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464522,"byte_end":464525,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464501,"byte_end":464510,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":467203,"byte_end":467220,"line_start":1053,"line_end":1053,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1330}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1338},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":467847,"byte_end":467861,"line_start":1074,"line_end":1074,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1349},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":468546,"byte_end":468553,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1360},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":469178,"byte_end":469186,"line_start":1112,"line_end":1112,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1364}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":469493,"byte_end":469507,"line_start":1120,"line_end":1120,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":469912,"byte_end":469924,"line_start":1129,"line_end":1129,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":470645,"byte_end":470651,"line_start":1154,"line_end":1154,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2545},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":470879,"byte_end":470890,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1379},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":472148,"byte_end":472156,"line_start":1201,"line_end":1201,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2554},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473037,"byte_end":473046,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2555},{"krate":0,"index":2556}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473425,"byte_end":473428,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473604,"byte_end":473607,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473669,"byte_end":473677,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473743,"byte_end":473751,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473818,"byte_end":473824,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":474000,"byte_end":474008,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":474136,"byte_end":474141,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1461},"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23198,"byte_end":23206,"line_start":677,"line_end":677,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":1471},{"krate":0,"index":1472}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/lib.rs","byte_start":23162,"byte_end":23189,"line_start":676,"line_end":676,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":44529,"byte_end":44537,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":71013,"byte_end":71022,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":73199,"byte_end":73207,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":74140,"byte_end":74152,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":78906,"byte_end":78917,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":80159,"byte_end":80171,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":93160,"byte_end":93166,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":95462,"byte_end":95470,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":95892,"byte_end":95897,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":100128,"byte_end":100133,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":100952,"byte_end":100962,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":101266,"byte_end":101269,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":149857,"byte_end":149865,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":150659,"byte_end":150670,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":152531,"byte_end":152541,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":152977,"byte_end":152981,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":153557,"byte_end":153562,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":153833,"byte_end":153844,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":154266,"byte_end":154280,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":154786,"byte_end":154796,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":159916,"byte_end":159921,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":160262,"byte_end":160267,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":160916,"byte_end":160921,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":165552,"byte_end":165563,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":174139,"byte_end":174152,"line_start":337,"line_end":337,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":175190,"byte_end":175200,"line_start":372,"line_end":372,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":184388,"byte_end":184398,"line_start":605,"line_end":605,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199372,"byte_end":199385,"line_start":1074,"line_end":1074,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199509,"byte_end":199513,"line_start":1080,"line_end":1080,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":201342,"byte_end":201346,"line_start":1137,"line_end":1137,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":201496,"byte_end":201508,"line_start":1146,"line_end":1146,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":206851,"byte_end":206868,"line_start":1287,"line_end":1287,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/expand.rs","byte_start":212006,"byte_end":212009,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/expand.rs","byte_start":212105,"byte_end":212108,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":220732,"byte_end":220739,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223803,"byte_end":223812,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223986,"byte_end":223995,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":224101,"byte_end":224110,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":226229,"byte_end":226238,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":226500,"byte_end":226509,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":226618,"byte_end":226627,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":229873,"byte_end":229877,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230087,"byte_end":230091,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231046,"byte_end":231050,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231132,"byte_end":231136,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231259,"byte_end":231263,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231492,"byte_end":231496,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_avx2/imp.rs","byte_start":273816,"byte_end":273821,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_avx2/imp.rs","byte_start":285353,"byte_end":285358,"line_start":363,"line_end":363,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_avx2/imp.rs","byte_start":288145,"byte_end":288149,"line_start":444,"line_end":444,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_ssse3/imp.rs","byte_start":305614,"byte_end":305619,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_ssse3/imp.rs","byte_start":317155,"byte_end":317160,"line_start":673,"line_end":673,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_ssse3/imp.rs","byte_start":319948,"byte_end":319952,"line_start":754,"line_end":754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":233722,"byte_end":233737,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":238816,"byte_end":238823,"line_start":198,"line_end":198,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241772,"byte_end":241783,"line_start":274,"line_end":274,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":243498,"byte_end":243511,"line_start":337,"line_end":337,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":247418,"byte_end":247429,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":252736,"byte_end":252752,"line_start":609,"line_end":609,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/pikevm.rs","byte_start":323748,"byte_end":323753,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/pikevm.rs","byte_start":324047,"byte_end":324050,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/pikevm.rs","byte_start":333174,"byte_end":333181,"line_start":355,"line_end":355,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":336997,"byte_end":337004,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":339958,"byte_end":339965,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":340106,"byte_end":340113,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345020,"byte_end":345024,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347415,"byte_end":347425,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348837,"byte_end":348846,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349969,"byte_end":349981,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365144,"byte_end":365149,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":366559,"byte_end":366564,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":366741,"byte_end":366746,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367051,"byte_end":367056,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367140,"byte_end":367145,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367356,"byte_end":367361,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":383877,"byte_end":383882,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":387920,"byte_end":387925,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":389437,"byte_end":389444,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":390031,"byte_end":390045,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":390620,"byte_end":390625,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":391604,"byte_end":391610,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":392299,"byte_end":392311,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":393739,"byte_end":393755,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":395493,"byte_end":395501,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1023},{"krate":0,"index":1025},{"krate":0,"index":1027},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398479,"byte_end":398487,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398714,"byte_end":398727,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":400218,"byte_end":400226,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":400862,"byte_end":400870,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":401654,"byte_end":401671,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":404033,"byte_end":404044,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":404630,"byte_end":404631,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":405286,"byte_end":405294,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":422069,"byte_end":422078,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":423632,"byte_end":423650,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":427141,"byte_end":427148,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":427423,"byte_end":427430,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428652,"byte_end":428666,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1153},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428951,"byte_end":428965,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431093,"byte_end":431098,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434197,"byte_end":434202,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434379,"byte_end":434384,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434572,"byte_end":434577,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434661,"byte_end":434666,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434877,"byte_end":434882,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1215},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":451396,"byte_end":451401,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":455440,"byte_end":455445,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":456825,"byte_end":456837,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":457436,"byte_end":457441,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":458413,"byte_end":458419,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":459912,"byte_end":459928,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":461655,"byte_end":461663,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1296},{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464601,"byte_end":464609,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464836,"byte_end":464849,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":465896,"byte_end":465904,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":466536,"byte_end":466544,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":467324,"byte_end":467341,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":467947,"byte_end":467961,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":468632,"byte_end":468639,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":470973,"byte_end":470984,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":471564,"byte_end":471565,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":472198,"byte_end":472206,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473402,"byte_end":473411,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":474207,"byte_end":474216,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/avx2.rs","byte_start":474718,"byte_end":474735,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/avx2.rs","byte_start":476434,"byte_end":476439,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/avx2.rs","byte_start":480222,"byte_end":480227,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/ssse3.rs","byte_start":480865,"byte_end":480883,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/ssse3.rs","byte_start":483203,"byte_end":483208,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/ssse3.rs","byte_start":485982,"byte_end":485987,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":44529,"byte_end":44537,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":71013,"byte_end":71022,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":73199,"byte_end":73207,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":74140,"byte_end":74152,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":78906,"byte_end":78917,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/compile.rs","byte_start":80159,"byte_end":80171,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":93160,"byte_end":93166,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":95462,"byte_end":95470,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":217},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":95892,"byte_end":95897,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":100128,"byte_end":100133,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":100952,"byte_end":100962,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":101266,"byte_end":101269,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":149857,"byte_end":149865,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":150659,"byte_end":150670,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":152531,"byte_end":152541,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":152977,"byte_end":152981,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":153557,"byte_end":153562,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1655},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":153833,"byte_end":153844,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1622},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":154266,"byte_end":154280,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/dfa.rs","byte_start":154786,"byte_end":154796,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":159916,"byte_end":159921,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1725},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":160262,"byte_end":160267,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1725},"to":{"krate":2,"index":7564}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/error.rs","byte_start":160916,"byte_end":160921,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1725},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":165552,"byte_end":165563,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":174139,"byte_end":174152,"line_start":337,"line_end":337,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":369},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":175190,"byte_end":175200,"line_start":372,"line_end":372,"column_start":32,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1740},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":184388,"byte_end":184398,"line_start":605,"line_end":605,"column_start":10,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199372,"byte_end":199385,"line_start":1074,"line_end":1074,"column_start":10,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":199509,"byte_end":199513,"line_start":1080,"line_end":1080,"column_start":6,"column_end":10},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":201342,"byte_end":201346,"line_start":1137,"line_end":1137,"column_start":16,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":366},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":201496,"byte_end":201508,"line_start":1146,"line_end":1146,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/exec.rs","byte_start":206851,"byte_end":206868,"line_start":1287,"line_end":1287,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/expand.rs","byte_start":212006,"byte_end":212009,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1832},"to":{"krate":2,"index":2220}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/expand.rs","byte_start":212105,"byte_end":212108,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1832},"to":{"krate":2,"index":2220}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":220732,"byte_end":220739,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223803,"byte_end":223812,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":223986,"byte_end":223995,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1869},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":224101,"byte_end":224110,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1869},"to":{"krate":0,"index":525}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":226229,"byte_end":226238,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":226500,"byte_end":226509,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1881},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":226618,"byte_end":226627,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1881},"to":{"krate":0,"index":525}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":229873,"byte_end":229877,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":230087,"byte_end":230091,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231046,"byte_end":231050,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":2220}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231132,"byte_end":231136,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":2220}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231259,"byte_end":231263,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/input.rs","byte_start":231492,"byte_end":231496,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_avx2/imp.rs","byte_start":273816,"byte_end":273821,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_avx2/imp.rs","byte_start":285353,"byte_end":285358,"line_start":363,"line_end":363,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_avx2/imp.rs","byte_start":288145,"byte_end":288149,"line_start":444,"line_end":444,"column_start":6,"column_end":10},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_ssse3/imp.rs","byte_start":305614,"byte_end":305619,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_ssse3/imp.rs","byte_start":317155,"byte_end":317160,"line_start":673,"line_end":673,"column_start":6,"column_end":11},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/teddy_ssse3/imp.rs","byte_start":319948,"byte_end":319952,"line_start":754,"line_end":754,"column_start":6,"column_end":10},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":233722,"byte_end":233737,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":238816,"byte_end":238823,"line_start":198,"line_end":198,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":241772,"byte_end":241783,"line_start":274,"line_end":274,"column_start":23,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":736},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":243498,"byte_end":243511,"line_start":337,"line_end":337,"column_start":6,"column_end":19},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2021},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":247418,"byte_end":247429,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2030},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/literal/mod.rs","byte_start":252736,"byte_end":252752,"line_start":609,"line_end":609,"column_start":6,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/pikevm.rs","byte_start":323748,"byte_end":323753,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2061},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/pikevm.rs","byte_start":324047,"byte_end":324050,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/pikevm.rs","byte_start":333174,"byte_end":333181,"line_start":355,"line_end":355,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":336997,"byte_end":337004,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":339958,"byte_end":339965,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":340106,"byte_end":340113,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":345020,"byte_end":345024,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":347415,"byte_end":347425,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/prog.rs","byte_start":348837,"byte_end":348846,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_builder.rs","byte_start":349969,"byte_end":349981,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":365144,"byte_end":365149,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":366559,"byte_end":366564,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2331},"to":{"krate":2,"index":7564}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":366741,"byte_end":366746,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2331},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367051,"byte_end":367056,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2331},"to":{"krate":2,"index":2220}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367140,"byte_end":367145,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2331},"to":{"krate":2,"index":6737}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":367356,"byte_end":367361,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":383877,"byte_end":383882,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":387920,"byte_end":387925,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":389437,"byte_end":389444,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":956},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":390031,"byte_end":390045,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":967},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":390620,"byte_end":390625,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":978},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":391604,"byte_end":391610,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":988},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":392299,"byte_end":392311,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":998},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":393739,"byte_end":393755,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":395493,"byte_end":395501,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398479,"byte_end":398487,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1014},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":398714,"byte_end":398727,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":400218,"byte_end":400226,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1014},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":400862,"byte_end":400870,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1014},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":401654,"byte_end":401671,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":404033,"byte_end":404044,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2343},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":404630,"byte_end":404631,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1089},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_bytes.rs","byte_start":405286,"byte_end":405294,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1092},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":422069,"byte_end":422078,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":423632,"byte_end":423650,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1109},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":424781,"byte_end":424786,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1537},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":427141,"byte_end":427148,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":427423,"byte_end":427430,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1128},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428652,"byte_end":428666,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_trait.rs","byte_start":428951,"byte_end":428965,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":431093,"byte_end":431098,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434197,"byte_end":434202,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2533},"to":{"krate":2,"index":7564}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434379,"byte_end":434384,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2533},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434572,"byte_end":434577,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2533},"to":{"krate":2,"index":2220}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434661,"byte_end":434666,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2533},"to":{"krate":2,"index":6737}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":434877,"byte_end":434882,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":451396,"byte_end":451401,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":455440,"byte_end":455445,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":456825,"byte_end":456837,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1247},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":457436,"byte_end":457441,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":458413,"byte_end":458419,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1268},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":459912,"byte_end":459928,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":461655,"byte_end":461663,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464601,"byte_end":464609,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":464836,"byte_end":464849,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":465896,"byte_end":465904,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":466536,"byte_end":466544,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":467324,"byte_end":467341,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":467947,"byte_end":467961,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1338},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":468632,"byte_end":468639,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1349},"to":{"krate":2,"index":3585}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":470973,"byte_end":470984,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2545},"to":{"krate":0,"index":1360}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":471564,"byte_end":471565,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1376},"to":{"krate":0,"index":1360}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/re_unicode.rs","byte_start":472198,"byte_end":472206,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1379},"to":{"krate":0,"index":1360}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":473402,"byte_end":473411,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/sparse.rs","byte_start":474207,"byte_end":474216,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2554},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/avx2.rs","byte_start":474718,"byte_end":474735,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/avx2.rs","byte_start":476434,"byte_end":476439,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/avx2.rs","byte_start":480222,"byte_end":480227,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2569},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/ssse3.rs","byte_start":480865,"byte_end":480883,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/ssse3.rs","byte_start":483203,"byte_end":483208,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hedayat/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.2/src/vector/ssse3.rs","byte_start":485982,"byte_end":485987,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2584},"to":{"krate":2,"index":7559}}]}